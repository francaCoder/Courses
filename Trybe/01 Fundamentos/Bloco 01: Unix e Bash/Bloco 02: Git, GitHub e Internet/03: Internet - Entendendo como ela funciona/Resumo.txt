1969 e se chamava arpha net, com o objetivo de ligar laborat√≥rios de pesquisas
www - World wide web

serei capaz de:
Explicar de forma simples como a internet funciona;
Entender o modelo Cliente & Servidor e identificar suas partes;
Compreender como funcionam os protocolos HTTP e HTTPS;
Identificar quais os tipos de requisi√ß√£o podem ser feitos atrav√©s desses protocolos.
mportante ter uma no√ß√£o de como a rede da internet √© estruturada, pois quando voc√™ for pensar no design de uma aplica√ß√£o web, por exemplo, ter√° que considerar fatores como a lat√™ncia da rede, a geolocaliza√ß√£o dos servidores, a velocidade e/ou disponibilidade de conex√£o dos usu√°rios, enfim.

O cliente √© uma aplica√ß√£o que est√° conectada √† Internet. A sua principal fun√ß√£o √© receber a intera√ß√£o do usu√°rio e traduzi-la em uma requisi√ß√£o para outro computador chamado Servidor Web. Todo computador tem um n√∫mero √∫nico, como o seu CPF, chamado endere√ßo IP. √â atrav√©s desse endere√ßo que computadores, celulares e tablets s√£o identificados.

Servidor: Como vimos no exemplo acima, nossa busca por www.google.com ser√° enviada para um Servidor . O Servidor √© um super computador conectado √† Internet. Ele tamb√©m tem o seu pr√≥prio endere√ßo IP, assim como o seu computador. O Servidor espera por requisi√ß√µes de outras m√°quinas (clientes). Diferente do seu computador, um Servidor tem um software espec√≠fico em execu√ß√£o que ir√° dizer como ele deve responder a uma requisi√ß√£o do seu navegador. A principal fun√ß√£o do Servidor √© armazenar, processar e entregar p√°ginas web para os Clientes. H√° diversos tipos de servidores, como Web Servers, Database Servers, File Servers, Application Servers . O servidor que usamos para fazer a busca por www.google.com √© um Web Server .

Endere√ßo IP: A sigla IP refere-se a Internet Protocol . O endere√ßo IP √© um identificador num√©rico para um dispositivo (computador, celular, tablet, impressora, roteador, servidor...) conectado √† rede TCP/IP. Todo dispositivo conectado √† Internet tem um endere√ßo IP √∫nico que ir√° identific√°-lo, e ser√° usado para comunicar com outros dispositivos. Os endere√ßos IP tem quatro campos de d√≠gitos separados por pontos (exemplo: 244.155.65.2). Esses n√∫meros s√£o chamados de endere√ßo l√≥gico. 

TCP/IP: Essa sigla refere-se √† Transmission Control Protocol/Internet Protocol . Um protocolo √© um conjunto de regras, e o protocolo TCP/IP √© utilizado para transmitir dados na rede. Ele tamb√©m √© o protocolo de comunica√ß√£o mais utilizado no mundo Web.

ISP: ISP ou Internet Service Provider √© o seu provedor de Internet. √â qualquer empresa que nos fornece acesso ao maravilhoso mundo Web. 

DNS: DNS ou Domain Name System √© um dispositivo com uma base de dados distribu√≠da que gerencia os nomes de servi√ßos, computadores ou qualquer dispositivo conectado √† Internet. Ele √© usado para relacionar o endere√ßo nominal (google.com) com o endere√ßo IP. Os servidores DNS s√£o respons√°veis por localizar e traduzir para n√∫meros (um endere√ßo IP) as buscas por sites que digitamos no navegador.

Port Number: O n√∫mero de porta √© um n√∫mero de 16 bits utilizado para identificar uma porta espec√≠fica no servidor, e est√° sempre associado ao endere√ßo IP. O Port number √© uma forma de identificar um processo espec√≠fico encaminhado para o servidor.
Host: O Host √© qualquer computador conectado √† rede, seja como cliente, servidor ou qualquer outro tipo de dispositivo. Cada host tem um endere√ßo IP √∫nico. Para o site que estamos buscando, www.google.com , o host √© o servidor web que hospeda a p√°gina na web. √â comum confundir o host com o servidor. Lembre-se que eles s√£o coisas diferentes! O Servidor √© um tipo de host - uma m√°quina espec√≠fica com endere√ßo IP. Por outro lado, o host pode ser tamb√©m uma organiza√ß√£o inteira que fornece um servi√ßo de hospedagem para manter in√∫meros servidores web.
HTTP: Hyper-text Transfer Protocol √© o protocolo utilizado para a comunica√ß√£o entre navegadores e servidores na Internet.
URL: O URL √© a sigla para Uniform Resource Locators e identifica um recurso web espec√≠fico. Podemos, como exemplo, mudar a nossa busca para https://www.google.com/travel/flights para pesquisar por pre√ßos de passagens a√©reas. O URL identifica o protocolo que ser√° utilizado para comunicarmos com o servidor (https), o nome do host (google.com) e o recurso que queremos acessar (travel/flights).


Protocolo HTTP E HTTPS
requisi√ß√µes
get
post
PUT pede atualiza√ß√£o de arquivo dentro do servidor
delete

A resposta √© feita com
Header (satus, remote adress, content type)
Body (json, html, imagem, som, video)

POST
O m√©todo POST √© utilizado para criar um novo recurso, como um formul√°rio para login. Voc√™ usar√° o m√©todo POST para criar um recurso subordinado (ex: novo usu√°rio) para a aplica√ß√£o pai (ex: http://exemplo.com/usuario). Ao contr√°rio do m√©todo GET, o m√©todo POST n√£o √© nem seguro e nem idempotente. Fazer duas ou mais requisi√ß√µes POSTS resultar√° em novos recursos criados (mesmo que id√™nticos). Requisi√ß√µes POST s√£o retornadas com o status code 201 (CREATED) e um novo caminho no header com o Link do recurso criado.
PUT
O m√©todo PUT √© utilizado para atualizar o recurso identificado pelo URL. Esse m√©todo tamb√©m pode ser utilizado para criar um novo recurso. Requisi√ß√µes PUT n√£o s√£o consideradas opera√ß√µes seguras, pois o estado da aplica√ß√£o √© modificado no servidor. No entanto, o m√©todo PUT √© idempotente porque m√∫ltiplas requisi√ß√µes PUT para atualizar um recurso t√™m o mesmo efeito que uma √∫nica requisi√ß√£o.
A resposta a requisi√ß√£o √© o status code 200 (OK) se o recurso foi atualizado com sucesso, ou 404 (NOT FOUND) se ele n√£o for encontrado.
DELETE
DELETE √© utilizado para deletar um recurso identificado pelo URL. As requisi√ß√µes DELETE s√£o idempotentes, pois quando deletamos um recurso ele ser√° deletado. Voc√™ pode fazer milhares de requisi√ß√µes com o m√©todo DELETE que no fim o resultado ser√° o mesmo: um recurso deletado.
A resposta requisi√ß√£o √© o status code 200 (OK) se o recurso for deletado com sucesso, ou 404 (NOT FOUND) se o recurso que ser√° deletado n√£o existir.
REST
Voc√™ pode j√° ter ouvido falar do termo RESTful para descrever uma aplica√ß√£o. REST √© a sigla para Representational State Transfer . √â um estilo de arquitetura utilizado no design de aplica√ß√µes Web. O estado da aplica√ß√£o s√£o os dados necess√°rios para que o servidor possa atender a uma determinada requisi√ß√£o. As regras do REST nos guiam a desenvolver sistemas mais perform√°ticos, escal√°veis, simples, de f√°cil manuten√ß√£o e modifica√ß√£o, port√°til e confi√°vel. Dentre elas, podemos destacar:
Interface uniforme: define a interface entre cliente e servidor de forma a desacoplar a arquitetura da aplica√ß√£o. Os verbos que vimos acima descrevem a grande maioria das regras para interface uniforme. Dentre as defini√ß√µes previstas pelo REST, as mais importantes s√£o:
Recursos, como dados de um banco de dados, devem ser identificados na requisi√ß√£o e o cliente ter√° acesso apenas a representa√ß√£o do recurso (ex: JSON, HTML)
O cliente deve ter informa√ß√µes suficientes para manipular recursos no servidor utilizando representa√ß√µes
As mensagens trocadas entre cliente e servidor devem ser auto-descritivas
Stateless: Essa regra define que todos os dados do estado da aplica√ß√£o que precisam ser manipulados em uma requisi√ß√£o devem estar contidos na pr√≥pria requisi√ß√£o (URL, HTTP body, HTTP header) e o servidor deve encaminhar para o cliente todos os dados referentes ao estado na resposta (HTTP headers, status code, HTTP response body).
O protocolo HTTP √© uma pe√ßa chave na comunica√ß√£o entre cliente-servidor. Para construir aplica√ß√µes RESTFul √© necess√°rio compreender o b√°sico de HTTP. Assim, voc√™ ser√° capaz de criar p√°ginas perform√°ticas e escal√°veis que far√£o a diferen√ßa na vida de muitos usu√°rios!
Agora responda ao quiz, lembrando que ele serve para fixa√ß√£o dos conte√∫dos e n√£o tem car√°ter avaliativo , n√£o se preocupe! üòâ
Quiz - Protocolo HTTP & REST
Curl
Por fim, voc√™ vai aprender sobre o comando curl , abrevia√ß√£o para Client URL . Ele √© um comando dispon√≠vel na maioria dos sistemas baseados em Unix que serve para verificar conectividade, al√©m transferir dados via terminal.